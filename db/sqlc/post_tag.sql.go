// Code generated by sqlc. DO NOT EDIT.
// source: post_tag.sql

package db

import (
	"context"
)

const createPostTag = `-- name: CreatePostTag :one
INSERT INTO post_tag (
  post_id,
  tag_id
) VALUES (
  $1, $2
)
RETURNING id, post_id, tag_id, created_at
`

type CreatePostTagParams struct {
	PostID int64 `json:"post_id"`
	TagID  int64 `json:"tag_id"`
}

func (q *Queries) CreatePostTag(ctx context.Context, arg CreatePostTagParams) (PostTag, error) {
	row := q.db.QueryRowContext(ctx, createPostTag, arg.PostID, arg.TagID)
	var i PostTag
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.TagID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePostTag = `-- name: DeletePostTag :exec
DELETE FROM post_tag
WHERE id = $1
`

func (q *Queries) DeletePostTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePostTag, id)
	return err
}

const getAllPostFromTag = `-- name: GetAllPostFromTag :many
SELECT id, post_id, tag_id, created_at FROM post_tag
WHERE tag_id = $1
ORDER BY created_at
`

func (q *Queries) GetAllPostFromTag(ctx context.Context, tagID int64) ([]PostTag, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostFromTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostTag
	for rows.Next() {
		var i PostTag
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.TagID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTagFromPost = `-- name: GetAllTagFromPost :many
SELECT id, post_id, tag_id, created_at FROM post_tag
WHERE post_id = $1
ORDER BY created_at
`

func (q *Queries) GetAllTagFromPost(ctx context.Context, postID int64) ([]PostTag, error) {
	rows, err := q.db.QueryContext(ctx, getAllTagFromPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostTag
	for rows.Next() {
		var i PostTag
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.TagID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostTag = `-- name: UpdatePostTag :one
UPDATE post_tag
SET (
  post_id,
  tag_id
) = (
  $2, $3
)
WHERE id = $1
RETURNING id, post_id, tag_id, created_at
`

type UpdatePostTagParams struct {
	ID     int64 `json:"id"`
	PostID int64 `json:"post_id"`
	TagID  int64 `json:"tag_id"`
}

func (q *Queries) UpdatePostTag(ctx context.Context, arg UpdatePostTagParams) (PostTag, error) {
	row := q.db.QueryRowContext(ctx, updatePostTag, arg.ID, arg.PostID, arg.TagID)
	var i PostTag
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.TagID,
		&i.CreatedAt,
	)
	return i, err
}
