// Code generated by sqlc. DO NOT EDIT.
// source: token.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO token (
  user_id,
  access_token,
  expired_at
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, access_token, expired_at, created_at
`

type CreateTokenParams struct {
	UserID      sql.NullInt64 `json:"user_id"`
	AccessToken string        `json:"access_token"`
	ExpiredAt   time.Time     `json:"expired_at"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, createToken, arg.UserID, arg.AccessToken, arg.ExpiredAt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM token
WHERE user_id = $1
`

func (q *Queries) DeleteToken(ctx context.Context, userID sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteToken, userID)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, user_id, access_token, expired_at, created_at FROM token
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetToken(ctx context.Context, userID sql.NullInt64) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
UPDATE token
SET (
  access_token,
  expired_at
) = (
  $2, $3
)
WHERE user_id = $1
RETURNING id, user_id, access_token, expired_at, created_at
`

type UpdateTokenParams struct {
	UserID      sql.NullInt64 `json:"user_id"`
	AccessToken string        `json:"access_token"`
	ExpiredAt   time.Time     `json:"expired_at"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (Token, error) {
	row := q.db.QueryRowContext(ctx, updateToken, arg.UserID, arg.AccessToken, arg.ExpiredAt)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessToken,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
