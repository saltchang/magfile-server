// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :one
INSERT INTO post (
  semantic_id,
  author_id,
  series_id,
  order_in_series,
  title,
  abstract,
  content,
  views,
  is_archived,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, semantic_id, author_id, series_id, order_in_series, title, abstract, content, views, is_archived, updated_at, created_at
`

type CreatePostParams struct {
	SemanticID    string        `json:"semantic_id"`
	AuthorID      int64         `json:"author_id"`
	SeriesID      sql.NullInt64 `json:"series_id"`
	OrderInSeries sql.NullInt32 `json:"order_in_series"`
	Title         string        `json:"title"`
	Abstract      string        `json:"abstract"`
	Content       string        `json:"content"`
	Views         int64         `json:"views"`
	IsArchived    bool          `json:"is_archived"`
	UpdatedAt     time.Time     `json:"updated_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.SemanticID,
		arg.AuthorID,
		arg.SeriesID,
		arg.OrderInSeries,
		arg.Title,
		arg.Abstract,
		arg.Content,
		arg.Views,
		arg.IsArchived,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.SeriesID,
		&i.OrderInSeries,
		&i.Title,
		&i.Abstract,
		&i.Content,
		&i.Views,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM post
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getAllPostFromAuthor = `-- name: GetAllPostFromAuthor :many
SELECT id, semantic_id, author_id, series_id, order_in_series, title, abstract, content, views, is_archived, updated_at, created_at FROM post
WHERE author_id = $1
ORDER BY created_at
`

func (q *Queries) GetAllPostFromAuthor(ctx context.Context, authorID int64) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostFromAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.SemanticID,
			&i.AuthorID,
			&i.SeriesID,
			&i.OrderInSeries,
			&i.Title,
			&i.Abstract,
			&i.Content,
			&i.Views,
			&i.IsArchived,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, semantic_id, author_id, series_id, order_in_series, title, abstract, content, views, is_archived, updated_at, created_at FROM post
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.SeriesID,
		&i.OrderInSeries,
		&i.Title,
		&i.Abstract,
		&i.Content,
		&i.Views,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getPostBySemanticID = `-- name: GetPostBySemanticID :one
SELECT id, semantic_id, author_id, series_id, order_in_series, title, abstract, content, views, is_archived, updated_at, created_at FROM post
WHERE author_id = $1
AND semantic_id = $2
LIMIT 1
`

type GetPostBySemanticIDParams struct {
	AuthorID   int64  `json:"author_id"`
	SemanticID string `json:"semantic_id"`
}

func (q *Queries) GetPostBySemanticID(ctx context.Context, arg GetPostBySemanticIDParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostBySemanticID, arg.AuthorID, arg.SemanticID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.SeriesID,
		&i.OrderInSeries,
		&i.Title,
		&i.Abstract,
		&i.Content,
		&i.Views,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE post
SET (
  semantic_id,
  author_id,
  series_id,
  order_in_series,
  title,
  abstract,
  content,
  views,
  is_archived,
  updated_at
) = (
  $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
WHERE id = $1
RETURNING id, semantic_id, author_id, series_id, order_in_series, title, abstract, content, views, is_archived, updated_at, created_at
`

type UpdatePostParams struct {
	ID            int64         `json:"id"`
	SemanticID    string        `json:"semantic_id"`
	AuthorID      int64         `json:"author_id"`
	SeriesID      sql.NullInt64 `json:"series_id"`
	OrderInSeries sql.NullInt32 `json:"order_in_series"`
	Title         string        `json:"title"`
	Abstract      string        `json:"abstract"`
	Content       string        `json:"content"`
	Views         int64         `json:"views"`
	IsArchived    bool          `json:"is_archived"`
	UpdatedAt     time.Time     `json:"updated_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.SemanticID,
		arg.AuthorID,
		arg.SeriesID,
		arg.OrderInSeries,
		arg.Title,
		arg.Abstract,
		arg.Content,
		arg.Views,
		arg.IsArchived,
		arg.UpdatedAt,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.SeriesID,
		&i.OrderInSeries,
		&i.Title,
		&i.Abstract,
		&i.Content,
		&i.Views,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
