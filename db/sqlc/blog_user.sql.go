// Code generated by sqlc. DO NOT EDIT.
// source: blog_user.sql

package db

import (
	"context"
	"time"
)

const createBlogUser = `-- name: CreateBlogUser :one
INSERT INTO blog_user (
  username,
  email,
  full_name,
  gender,
  current_location,
  password_hash,
  logined_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, username, email, full_name, gender, current_location, password_hash, logined_at, created_at
`

type CreateBlogUserParams struct {
	Username        string    `json:"username"`
	Email           string    `json:"email"`
	FullName        string    `json:"full_name"`
	Gender          string    `json:"gender"`
	CurrentLocation string    `json:"current_location"`
	PasswordHash    string    `json:"password_hash"`
	LoginedAt       time.Time `json:"logined_at"`
}

func (q *Queries) CreateBlogUser(ctx context.Context, arg CreateBlogUserParams) (BlogUser, error) {
	row := q.db.QueryRowContext(ctx, createBlogUser,
		arg.Username,
		arg.Email,
		arg.FullName,
		arg.Gender,
		arg.CurrentLocation,
		arg.PasswordHash,
		arg.LoginedAt,
	)
	var i BlogUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.Gender,
		&i.CurrentLocation,
		&i.PasswordHash,
		&i.LoginedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBlogUser = `-- name: DeleteBlogUser :exec
DELETE FROM blog_user
WHERE id = $1
`

func (q *Queries) DeleteBlogUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBlogUser, id)
	return err
}

const getBlogUser = `-- name: GetBlogUser :one
SELECT id, username, email, full_name, gender, current_location, password_hash, logined_at, created_at FROM blog_user
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBlogUser(ctx context.Context, id int64) (BlogUser, error) {
	row := q.db.QueryRowContext(ctx, getBlogUser, id)
	var i BlogUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.Gender,
		&i.CurrentLocation,
		&i.PasswordHash,
		&i.LoginedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateBlogUser = `-- name: UpdateBlogUser :one
UPDATE blog_user
SET (
  username,
  email,
  full_name,
  gender,
  current_location,
  password_hash,
  logined_at
) = (
  $2, $3, $4, $5, $6, $7, $8
)
WHERE id = $1
RETURNING id, username, email, full_name, gender, current_location, password_hash, logined_at, created_at
`

type UpdateBlogUserParams struct {
	ID              int64     `json:"id"`
	Username        string    `json:"username"`
	Email           string    `json:"email"`
	FullName        string    `json:"full_name"`
	Gender          string    `json:"gender"`
	CurrentLocation string    `json:"current_location"`
	PasswordHash    string    `json:"password_hash"`
	LoginedAt       time.Time `json:"logined_at"`
}

func (q *Queries) UpdateBlogUser(ctx context.Context, arg UpdateBlogUserParams) (BlogUser, error) {
	row := q.db.QueryRowContext(ctx, updateBlogUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.FullName,
		arg.Gender,
		arg.CurrentLocation,
		arg.PasswordHash,
		arg.LoginedAt,
	)
	var i BlogUser
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.FullName,
		&i.Gender,
		&i.CurrentLocation,
		&i.PasswordHash,
		&i.LoginedAt,
		&i.CreatedAt,
	)
	return i, err
}
