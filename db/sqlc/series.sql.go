// Code generated by sqlc. DO NOT EDIT.
// source: series.sql

package db

import (
	"context"
	"time"
)

const createSeries = `-- name: CreateSeries :one
INSERT INTO series (
  semantic_id,
  author_id,
  title,
  abstract,
  is_archived,
  updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, semantic_id, author_id, title, abstract, is_archived, updated_at, created_at
`

type CreateSeriesParams struct {
	SemanticID string    `json:"semantic_id"`
	AuthorID   int64     `json:"author_id"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	IsArchived bool      `json:"is_archived"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) CreateSeries(ctx context.Context, arg CreateSeriesParams) (Series, error) {
	row := q.db.QueryRowContext(ctx, createSeries,
		arg.SemanticID,
		arg.AuthorID,
		arg.Title,
		arg.Abstract,
		arg.IsArchived,
		arg.UpdatedAt,
	)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.Title,
		&i.Abstract,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSeries = `-- name: DeleteSeries :exec
DELETE FROM series
WHERE id = $1
`

func (q *Queries) DeleteSeries(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSeries, id)
	return err
}

const getAllSeriesFromAuthor = `-- name: GetAllSeriesFromAuthor :many
SELECT id, semantic_id, author_id, title, abstract, is_archived, updated_at, created_at FROM series
WHERE author_id = $1
ORDER BY created_at
`

func (q *Queries) GetAllSeriesFromAuthor(ctx context.Context, authorID int64) ([]Series, error) {
	rows, err := q.db.QueryContext(ctx, getAllSeriesFromAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Series
	for rows.Next() {
		var i Series
		if err := rows.Scan(
			&i.ID,
			&i.SemanticID,
			&i.AuthorID,
			&i.Title,
			&i.Abstract,
			&i.IsArchived,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSeries = `-- name: GetSeries :one
SELECT id, semantic_id, author_id, title, abstract, is_archived, updated_at, created_at FROM series
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSeries(ctx context.Context, id int64) (Series, error) {
	row := q.db.QueryRowContext(ctx, getSeries, id)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.Title,
		&i.Abstract,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSeriesBySemanticID = `-- name: GetSeriesBySemanticID :one
SELECT id, semantic_id, author_id, title, abstract, is_archived, updated_at, created_at FROM series
WHERE author_id = $1
AND semantic_id = $2
LIMIT 1
`

type GetSeriesBySemanticIDParams struct {
	AuthorID   int64  `json:"author_id"`
	SemanticID string `json:"semantic_id"`
}

func (q *Queries) GetSeriesBySemanticID(ctx context.Context, arg GetSeriesBySemanticIDParams) (Series, error) {
	row := q.db.QueryRowContext(ctx, getSeriesBySemanticID, arg.AuthorID, arg.SemanticID)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.Title,
		&i.Abstract,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateSeries = `-- name: UpdateSeries :one
UPDATE series
SET (
  semantic_id,
  author_id,
  title,
  abstract,
  is_archived,
  updated_at
) = (
  $2, $3, $4, $5, $6, $7
)
WHERE id = $1
RETURNING id, semantic_id, author_id, title, abstract, is_archived, updated_at, created_at
`

type UpdateSeriesParams struct {
	ID         int64     `json:"id"`
	SemanticID string    `json:"semantic_id"`
	AuthorID   int64     `json:"author_id"`
	Title      string    `json:"title"`
	Abstract   string    `json:"abstract"`
	IsArchived bool      `json:"is_archived"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) UpdateSeries(ctx context.Context, arg UpdateSeriesParams) (Series, error) {
	row := q.db.QueryRowContext(ctx, updateSeries,
		arg.ID,
		arg.SemanticID,
		arg.AuthorID,
		arg.Title,
		arg.Abstract,
		arg.IsArchived,
		arg.UpdatedAt,
	)
	var i Series
	err := row.Scan(
		&i.ID,
		&i.SemanticID,
		&i.AuthorID,
		&i.Title,
		&i.Abstract,
		&i.IsArchived,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
