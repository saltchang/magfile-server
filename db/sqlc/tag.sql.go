// Code generated by sqlc. DO NOT EDIT.
// source: tag.sql

package db

import (
	"context"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tag (
  author_id,
  name
) VALUES (
  $1, $2
)
RETURNING id, author_id, name, created_at
`

type CreateTagParams struct {
	AuthorID int64  `json:"author_id"`
	Name     string `json:"name"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.AuthorID, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tag
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getAllTagFromAuthor = `-- name: GetAllTagFromAuthor :many
SELECT id, author_id, name, created_at FROM tag
WHERE author_id = $1
ORDER BY created_at
`

func (q *Queries) GetAllTagFromAuthor(ctx context.Context, authorID int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, getAllTagFromAuthor, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTag = `-- name: GetTag :one
SELECT id, author_id, name, created_at FROM tag
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getTagByAuthorAndName = `-- name: GetTagByAuthorAndName :one
SELECT id, author_id, name, created_at FROM tag
WHERE author_id = $1
AND name = $2
LIMIT 1
`

type GetTagByAuthorAndNameParams struct {
	AuthorID int64  `json:"author_id"`
	Name     string `json:"name"`
}

func (q *Queries) GetTagByAuthorAndName(ctx context.Context, arg GetTagByAuthorAndNameParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByAuthorAndName, arg.AuthorID, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const updateTag = `-- name: UpdateTag :one
UPDATE tag
SET (
  author_id,
  name
) = (
  $2, $3
)
WHERE id = $1
RETURNING id, author_id, name, created_at
`

type UpdateTagParams struct {
	ID       int64  `json:"id"`
	AuthorID int64  `json:"author_id"`
	Name     string `json:"name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, updateTag, arg.ID, arg.AuthorID, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.AuthorID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
